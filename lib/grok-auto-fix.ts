import { env } from './env';
import { db } from './database';

export interface AutoFixResult {
  url: string;
  success: boolean;
  title?: string;
  description?: string;
  content?: string;
  error?: string;
  timestamp: string;
}

export class GrokAutoFix {
  private grokApiKey: string;
  private grokModel: string;

  constructor() {
    this.grokApiKey = env.GROK_API_KEY || '';
    this.grokModel = env.GROK_MODEL || 'grok-4-fast-reasoning';
  }

  async fix404Page(url: string): Promise<AutoFixResult> {
    console.log(`Auto-fixing 404 page: ${url}`);
    
    try {
      // Extract movie title from URL
      const movieTitle = this.extractMovieTitleFromUrl(url);
      
      if (!movieTitle) {
        return {
          url,
          success: false,
          error: 'Could not extract movie title from URL',
          timestamp: new Date().toISOString()
        };
      }

      // Generate content using Grok
      const content = await this.generateMovieContent(movieTitle);
      
      if (!content) {
        return {
          url,
          success: false,
          error: 'Failed to generate content with Grok',
          timestamp: new Date().toISOString()
        };
      }

      // Create the movie page in database
      const movieData = await this.createMoviePage(movieTitle, content, url);
      
      if (!movieData) {
        return {
          url,
          success: false,
          error: 'Failed to create movie page in database',
          timestamp: new Date().toISOString()
        };
      }

      return {
        url,
        success: true,
        title: content.title,
        description: content.description,
        content: content.fullContent,
        timestamp: new Date().toISOString()
      };

    } catch (error) {
      console.error('Error auto-fixing 404 page:', error);
      return {
        url,
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error',
        timestamp: new Date().toISOString()
      };
    }
  }

  private extractMovieTitleFromUrl(url: string): string | null {
    // Extract from /movie/slug format
    const movieMatch = url.match(/\/movie\/([^\/]+)/);
    if (movieMatch) {
      return movieMatch[1].replace(/-/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
    }

    // Extract from /blog/slug format
    const blogMatch = url.match(/\/blog\/([^\/]+)/);
    if (blogMatch) {
      return blogMatch[1].replace(/-/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
    }

    return null;
  }

  private async generateMovieContent(movieTitle: string): Promise<any> {
    const prompt = `You are a professional movie critic and SEO expert with 15+ years of experience. Create a comprehensive 200-word description for the movie "${movieTitle}".

Requirements:
- Write exactly 200 words (no more, no less)
- Include the movie title naturally in the first sentence
- Mention key themes, genres, and appeal
- Include streaming platform suggestions (Netflix, Prime Video, Disney+, Hulu, Max, Apple TV+)
- Use engaging, SEO-optimized language
- Include relevant keywords naturally
- End with a call-to-action

Format your response as JSON:
{
  "title": "Movie Title (Year) - Review & Where to Watch",
  "description": "200-word description here",
  "fullContent": "Extended content for the page",
  "keywords": ["keyword1", "keyword2", "keyword3"],
  "seoScore": 95
}

Make it professional, engaging, and SEO-optimized.`;

    try {
      const response = await fetch('https://api.x.ai/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${this.grokApiKey}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          model: this.grokModel,
          messages: [
            {
              role: 'system',
              content: 'You are a professional movie critic and SEO expert. Always respond with valid JSON format.'
            },
            {
              role: 'user',
              content: prompt
            }
          ],
          max_tokens: 1000,
          temperature: 0.7,
        }),
      });

      if (!response.ok) {
        throw new Error(`Grok API error: ${response.status} ${response.statusText}`);
      }

      const data = await response.json();
      const content = data.choices[0]?.message?.content;

      if (!content) {
        throw new Error('No content generated by Grok');
      }

      // Parse JSON response
      const jsonMatch = content.match(/\{[\s\S]*\}/);
      if (!jsonMatch) {
        throw new Error('Invalid JSON response from Grok');
      }

      return JSON.parse(jsonMatch[0]);

    } catch (error) {
      console.error('Error generating content with Grok:', error);
      throw error;
    }
  }

  private async createMoviePage(movieTitle: string, content: any, originalUrl: string): Promise<any> {
    try {
      // Generate slug from title
      const slug = movieTitle.toLowerCase()
        .replace(/[^a-z0-9\s-]/g, '')
        .replace(/\s+/g, '-')
        .replace(/-+/g, '-')
        .trim();

      // Create movie entry in database
      const movieData = {
        tmdb_id: Math.floor(Math.random() * 1000000), // Temporary ID
        type: 'movie',
        slug: slug,
        title: movieTitle,
        original_title: movieTitle,
        overview: content.description,
        release_date: new Date().toISOString().split('T')[0],
        popularity: 50,
        vote_average: 7.5,
        vote_count: 100,
        adult: false,
        genre_ids: [28, 12, 16], // Default genres
        original_language: 'en',
        poster_path: '/placeholder.jpg',
        backdrop_path: '/placeholder.jpg',
        video: false,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      };

      const { data: movie, error } = await db.ensureClient()
        .from('titles')
        .insert(movieData)
        .select()
        .single();

      if (error) {
        console.error('Error creating movie page:', error);
        return null;
      }

      // Create content item for the page
      const contentData = {
        title: content.title,
        slug: slug,
        content: content.fullContent,
        description: content.description,
        status: 'published',
        category: 'movie-review',
        author: 'AI Assistant',
        word_count: content.description.split(' ').length,
        seo_score: content.seoScore || 90,
        keywords: content.keywords || [],
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      };

      const { error: contentError } = await db.ensureClient()
        .from('content_items')
        .insert(contentData);

      if (contentError) {
        console.error('Error creating content item:', contentError);
      }

      return movie;

    } catch (error) {
      console.error('Error creating movie page:', error);
      return null;
    }
  }

  async batchFix404s(urls: string[]): Promise<AutoFixResult[]> {
    console.log(`Batch fixing ${urls.length} 404 URLs`);
    
    const results: AutoFixResult[] = [];
    
    for (const url of urls) {
      try {
        const result = await this.fix404Page(url);
        results.push(result);
        
        // Delay between requests to respect rate limits
        await this.delay(1000);
        
      } catch (error) {
        results.push({
          url,
          success: false,
          error: error instanceof Error ? error.message : 'Unknown error',
          timestamp: new Date().toISOString()
        });
      }
    }
    
    return results;
  }

  private delay(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms));
  }
}


